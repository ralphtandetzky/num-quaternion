name: Cargo Build & Test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [
          1.60.0, # Minimum version determined by cargo-msrv
          stable,
          beta,
          nightly
        ]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      if: startsWith(matrix.rust, '1')
      with:
        path: ~/.cargo/registry/index
        key: cargo-${{ matrix.rust }}-git-index
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: ./ci/test_full.sh

  check_formatting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@1.79.0
      with:
        components: rustfmt
    - run: cargo fmt --check

  static_analysis:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@1.79.0
    - name: install clippy
      run: rustup component add clippy
    - name: Check style violations
      run: cargo clippy --all-features

  semver_checks_all_stable:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Check semver violations
      uses: obi1kenobi/cargo-semver-checks-action@v2

  semver_checks_default_features:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Check semver violations for all default features
      uses: obi1kenobi/cargo-semver-checks-action@v2
      with:
        feature-group: default-features

  # One job that "summarizes" the success state of this pipeline. This can then be added to branch
  # protection, rather than having to add each job separately.
  success:
    name: Success
    runs-on: ubuntu-latest
    needs: [build_and_test, check_formatting, static_analysis, semver_checks]
    # Github branch protection is exceedingly silly and treats "jobs skipped because a dependency
    # failed" as success. So we have to do some contortions to ensure the job fails if any of its
    # dependencies fails.
    if: always() # make sure this is never "skipped"
    steps:
      # Manually check the status of all dependencies. `if: failure()` does not work.
      - name: Check if any dependency failed
        run: jq --exit-status 'all(.result == "success")' <<< '${{ toJson(needs) }}'
